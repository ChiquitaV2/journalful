// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: articles/v1/article.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Author } from "../../profile/v1/author";

export const protobufPackage = "api.articles.v1";

export interface Article {
  id: number;
  doi: string;
  title: string;
  /** List of authors */
  authors: Author[];
  abstract?: string | undefined;
  publicationYear?: number | undefined;
  journalName?: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface GetArticleRequest {
  id: number;
}

export interface GetArticleResponse {
  article: Article | undefined;
}

export interface GetArticleByDOIRequest {
  doi: string;
}

export interface GetArticleByDOIResponse {
  article: Article | undefined;
}

export interface ListArticlesRequest {
  /** Page number for pagination */
  page?:
    | number
    | undefined;
  /** Number of articles per page */
  pageSize?: number | undefined;
}

export interface ListArticlesResponse {
  articles: Article[];
}

export interface CreateArticleRequest {
  doi: string;
  title: string;
  /** List of authors */
  authors: Author[];
  abstract?: string | undefined;
  publicationYear?: number | undefined;
  journalName?: string | undefined;
}

export interface CreateArticleResponse {
  /** ID of the newly created article */
  id: number;
}

export interface UpdateArticleRequest {
  id: number;
  doi: string;
  title: string;
  abstract?: string | undefined;
  publicationYear?: number | undefined;
  journalName?: string | undefined;
}

/** Empty response indicating success */
export interface UpdateArticleResponse {
}

export interface DeleteArticleRequest {
  id: number;
}

/** Empty response indicating success */
export interface DeleteArticleResponse {
}

function createBaseArticle(): Article {
  return {
    id: 0,
    doi: "",
    title: "",
    authors: [],
    abstract: undefined,
    publicationYear: undefined,
    journalName: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const Article: MessageFns<Article> = {
  encode(message: Article, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.doi !== "") {
      writer.uint32(18).string(message.doi);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    for (const v of message.authors) {
      Author.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.abstract !== undefined) {
      writer.uint32(42).string(message.abstract);
    }
    if (message.publicationYear !== undefined) {
      writer.uint32(48).int32(message.publicationYear);
    }
    if (message.journalName !== undefined) {
      writer.uint32(58).string(message.journalName);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Article {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArticle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.doi = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.authors.push(Author.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.abstract = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.publicationYear = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.journalName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Article {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      doi: isSet(object.doi) ? globalThis.String(object.doi) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      authors: globalThis.Array.isArray(object?.authors) ? object.authors.map((e: any) => Author.fromJSON(e)) : [],
      abstract: isSet(object.abstract) ? globalThis.String(object.abstract) : undefined,
      publicationYear: isSet(object.publicationYear) ? globalThis.Number(object.publicationYear) : undefined,
      journalName: isSet(object.journalName) ? globalThis.String(object.journalName) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Article): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.doi !== "") {
      obj.doi = message.doi;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.authors?.length) {
      obj.authors = message.authors.map((e) => Author.toJSON(e));
    }
    if (message.abstract !== undefined) {
      obj.abstract = message.abstract;
    }
    if (message.publicationYear !== undefined) {
      obj.publicationYear = Math.round(message.publicationYear);
    }
    if (message.journalName !== undefined) {
      obj.journalName = message.journalName;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Article>, I>>(base?: I): Article {
    return Article.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Article>, I>>(object: I): Article {
    const message = createBaseArticle();
    message.id = object.id ?? 0;
    message.doi = object.doi ?? "";
    message.title = object.title ?? "";
    message.authors = object.authors?.map((e) => Author.fromPartial(e)) || [];
    message.abstract = object.abstract ?? undefined;
    message.publicationYear = object.publicationYear ?? undefined;
    message.journalName = object.journalName ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseGetArticleRequest(): GetArticleRequest {
  return { id: 0 };
}

export const GetArticleRequest: MessageFns<GetArticleRequest> = {
  encode(message: GetArticleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArticleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArticleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArticleRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetArticleRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetArticleRequest>, I>>(base?: I): GetArticleRequest {
    return GetArticleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetArticleRequest>, I>>(object: I): GetArticleRequest {
    const message = createBaseGetArticleRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetArticleResponse(): GetArticleResponse {
  return { article: undefined };
}

export const GetArticleResponse: MessageFns<GetArticleResponse> = {
  encode(message: GetArticleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.article !== undefined) {
      Article.encode(message.article, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArticleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArticleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.article = Article.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArticleResponse {
    return { article: isSet(object.article) ? Article.fromJSON(object.article) : undefined };
  },

  toJSON(message: GetArticleResponse): unknown {
    const obj: any = {};
    if (message.article !== undefined) {
      obj.article = Article.toJSON(message.article);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetArticleResponse>, I>>(base?: I): GetArticleResponse {
    return GetArticleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetArticleResponse>, I>>(object: I): GetArticleResponse {
    const message = createBaseGetArticleResponse();
    message.article = (object.article !== undefined && object.article !== null)
      ? Article.fromPartial(object.article)
      : undefined;
    return message;
  },
};

function createBaseGetArticleByDOIRequest(): GetArticleByDOIRequest {
  return { doi: "" };
}

export const GetArticleByDOIRequest: MessageFns<GetArticleByDOIRequest> = {
  encode(message: GetArticleByDOIRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.doi !== "") {
      writer.uint32(10).string(message.doi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArticleByDOIRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArticleByDOIRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.doi = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArticleByDOIRequest {
    return { doi: isSet(object.doi) ? globalThis.String(object.doi) : "" };
  },

  toJSON(message: GetArticleByDOIRequest): unknown {
    const obj: any = {};
    if (message.doi !== "") {
      obj.doi = message.doi;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetArticleByDOIRequest>, I>>(base?: I): GetArticleByDOIRequest {
    return GetArticleByDOIRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetArticleByDOIRequest>, I>>(object: I): GetArticleByDOIRequest {
    const message = createBaseGetArticleByDOIRequest();
    message.doi = object.doi ?? "";
    return message;
  },
};

function createBaseGetArticleByDOIResponse(): GetArticleByDOIResponse {
  return { article: undefined };
}

export const GetArticleByDOIResponse: MessageFns<GetArticleByDOIResponse> = {
  encode(message: GetArticleByDOIResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.article !== undefined) {
      Article.encode(message.article, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetArticleByDOIResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetArticleByDOIResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.article = Article.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetArticleByDOIResponse {
    return { article: isSet(object.article) ? Article.fromJSON(object.article) : undefined };
  },

  toJSON(message: GetArticleByDOIResponse): unknown {
    const obj: any = {};
    if (message.article !== undefined) {
      obj.article = Article.toJSON(message.article);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetArticleByDOIResponse>, I>>(base?: I): GetArticleByDOIResponse {
    return GetArticleByDOIResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetArticleByDOIResponse>, I>>(object: I): GetArticleByDOIResponse {
    const message = createBaseGetArticleByDOIResponse();
    message.article = (object.article !== undefined && object.article !== null)
      ? Article.fromPartial(object.article)
      : undefined;
    return message;
  },
};

function createBaseListArticlesRequest(): ListArticlesRequest {
  return { page: undefined, pageSize: undefined };
}

export const ListArticlesRequest: MessageFns<ListArticlesRequest> = {
  encode(message: ListArticlesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== undefined) {
      writer.uint32(8).int32(message.page);
    }
    if (message.pageSize !== undefined) {
      writer.uint32(16).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListArticlesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArticlesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArticlesRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
    };
  },

  toJSON(message: ListArticlesRequest): unknown {
    const obj: any = {};
    if (message.page !== undefined) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListArticlesRequest>, I>>(base?: I): ListArticlesRequest {
    return ListArticlesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListArticlesRequest>, I>>(object: I): ListArticlesRequest {
    const message = createBaseListArticlesRequest();
    message.page = object.page ?? undefined;
    message.pageSize = object.pageSize ?? undefined;
    return message;
  },
};

function createBaseListArticlesResponse(): ListArticlesResponse {
  return { articles: [] };
}

export const ListArticlesResponse: MessageFns<ListArticlesResponse> = {
  encode(message: ListArticlesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.articles) {
      Article.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListArticlesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListArticlesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.articles.push(Article.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListArticlesResponse {
    return {
      articles: globalThis.Array.isArray(object?.articles) ? object.articles.map((e: any) => Article.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListArticlesResponse): unknown {
    const obj: any = {};
    if (message.articles?.length) {
      obj.articles = message.articles.map((e) => Article.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListArticlesResponse>, I>>(base?: I): ListArticlesResponse {
    return ListArticlesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListArticlesResponse>, I>>(object: I): ListArticlesResponse {
    const message = createBaseListArticlesResponse();
    message.articles = object.articles?.map((e) => Article.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateArticleRequest(): CreateArticleRequest {
  return { doi: "", title: "", authors: [], abstract: undefined, publicationYear: undefined, journalName: undefined };
}

export const CreateArticleRequest: MessageFns<CreateArticleRequest> = {
  encode(message: CreateArticleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.doi !== "") {
      writer.uint32(10).string(message.doi);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    for (const v of message.authors) {
      Author.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.abstract !== undefined) {
      writer.uint32(42).string(message.abstract);
    }
    if (message.publicationYear !== undefined) {
      writer.uint32(48).int32(message.publicationYear);
    }
    if (message.journalName !== undefined) {
      writer.uint32(58).string(message.journalName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateArticleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateArticleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.doi = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.authors.push(Author.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.abstract = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.publicationYear = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.journalName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateArticleRequest {
    return {
      doi: isSet(object.doi) ? globalThis.String(object.doi) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      authors: globalThis.Array.isArray(object?.authors) ? object.authors.map((e: any) => Author.fromJSON(e)) : [],
      abstract: isSet(object.abstract) ? globalThis.String(object.abstract) : undefined,
      publicationYear: isSet(object.publicationYear) ? globalThis.Number(object.publicationYear) : undefined,
      journalName: isSet(object.journalName) ? globalThis.String(object.journalName) : undefined,
    };
  },

  toJSON(message: CreateArticleRequest): unknown {
    const obj: any = {};
    if (message.doi !== "") {
      obj.doi = message.doi;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.authors?.length) {
      obj.authors = message.authors.map((e) => Author.toJSON(e));
    }
    if (message.abstract !== undefined) {
      obj.abstract = message.abstract;
    }
    if (message.publicationYear !== undefined) {
      obj.publicationYear = Math.round(message.publicationYear);
    }
    if (message.journalName !== undefined) {
      obj.journalName = message.journalName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateArticleRequest>, I>>(base?: I): CreateArticleRequest {
    return CreateArticleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateArticleRequest>, I>>(object: I): CreateArticleRequest {
    const message = createBaseCreateArticleRequest();
    message.doi = object.doi ?? "";
    message.title = object.title ?? "";
    message.authors = object.authors?.map((e) => Author.fromPartial(e)) || [];
    message.abstract = object.abstract ?? undefined;
    message.publicationYear = object.publicationYear ?? undefined;
    message.journalName = object.journalName ?? undefined;
    return message;
  },
};

function createBaseCreateArticleResponse(): CreateArticleResponse {
  return { id: 0 };
}

export const CreateArticleResponse: MessageFns<CreateArticleResponse> = {
  encode(message: CreateArticleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateArticleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateArticleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateArticleResponse {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: CreateArticleResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateArticleResponse>, I>>(base?: I): CreateArticleResponse {
    return CreateArticleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateArticleResponse>, I>>(object: I): CreateArticleResponse {
    const message = createBaseCreateArticleResponse();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseUpdateArticleRequest(): UpdateArticleRequest {
  return { id: 0, doi: "", title: "", abstract: undefined, publicationYear: undefined, journalName: undefined };
}

export const UpdateArticleRequest: MessageFns<UpdateArticleRequest> = {
  encode(message: UpdateArticleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.doi !== "") {
      writer.uint32(18).string(message.doi);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.abstract !== undefined) {
      writer.uint32(34).string(message.abstract);
    }
    if (message.publicationYear !== undefined) {
      writer.uint32(40).int32(message.publicationYear);
    }
    if (message.journalName !== undefined) {
      writer.uint32(50).string(message.journalName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateArticleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateArticleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.doi = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.abstract = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.publicationYear = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.journalName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateArticleRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      doi: isSet(object.doi) ? globalThis.String(object.doi) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      abstract: isSet(object.abstract) ? globalThis.String(object.abstract) : undefined,
      publicationYear: isSet(object.publicationYear) ? globalThis.Number(object.publicationYear) : undefined,
      journalName: isSet(object.journalName) ? globalThis.String(object.journalName) : undefined,
    };
  },

  toJSON(message: UpdateArticleRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.doi !== "") {
      obj.doi = message.doi;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.abstract !== undefined) {
      obj.abstract = message.abstract;
    }
    if (message.publicationYear !== undefined) {
      obj.publicationYear = Math.round(message.publicationYear);
    }
    if (message.journalName !== undefined) {
      obj.journalName = message.journalName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateArticleRequest>, I>>(base?: I): UpdateArticleRequest {
    return UpdateArticleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateArticleRequest>, I>>(object: I): UpdateArticleRequest {
    const message = createBaseUpdateArticleRequest();
    message.id = object.id ?? 0;
    message.doi = object.doi ?? "";
    message.title = object.title ?? "";
    message.abstract = object.abstract ?? undefined;
    message.publicationYear = object.publicationYear ?? undefined;
    message.journalName = object.journalName ?? undefined;
    return message;
  },
};

function createBaseUpdateArticleResponse(): UpdateArticleResponse {
  return {};
}

export const UpdateArticleResponse: MessageFns<UpdateArticleResponse> = {
  encode(_: UpdateArticleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateArticleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateArticleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateArticleResponse {
    return {};
  },

  toJSON(_: UpdateArticleResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateArticleResponse>, I>>(base?: I): UpdateArticleResponse {
    return UpdateArticleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateArticleResponse>, I>>(_: I): UpdateArticleResponse {
    const message = createBaseUpdateArticleResponse();
    return message;
  },
};

function createBaseDeleteArticleRequest(): DeleteArticleRequest {
  return { id: 0 };
}

export const DeleteArticleRequest: MessageFns<DeleteArticleRequest> = {
  encode(message: DeleteArticleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteArticleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteArticleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteArticleRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteArticleRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteArticleRequest>, I>>(base?: I): DeleteArticleRequest {
    return DeleteArticleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteArticleRequest>, I>>(object: I): DeleteArticleRequest {
    const message = createBaseDeleteArticleRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseDeleteArticleResponse(): DeleteArticleResponse {
  return {};
}

export const DeleteArticleResponse: MessageFns<DeleteArticleResponse> = {
  encode(_: DeleteArticleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteArticleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteArticleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteArticleResponse {
    return {};
  },

  toJSON(_: DeleteArticleResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteArticleResponse>, I>>(base?: I): DeleteArticleResponse {
    return DeleteArticleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteArticleResponse>, I>>(_: I): DeleteArticleResponse {
    const message = createBaseDeleteArticleResponse();
    return message;
  },
};

export interface ArticlesService {
  GetArticle(request: GetArticleRequest): Promise<GetArticleResponse>;
  GetArticleByDOI(request: GetArticleByDOIRequest): Promise<GetArticleByDOIResponse>;
  ListArticles(request: ListArticlesRequest): Promise<ListArticlesResponse>;
  CreateArticle(request: CreateArticleRequest): Promise<CreateArticleResponse>;
  UpdateArticle(request: UpdateArticleRequest): Promise<UpdateArticleResponse>;
  DeleteArticle(request: DeleteArticleRequest): Promise<DeleteArticleResponse>;
}

export const ArticlesServiceServiceName = "api.articles.v1.ArticlesService";
export class ArticlesServiceClientImpl implements ArticlesService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ArticlesServiceServiceName;
    this.rpc = rpc;
    this.GetArticle = this.GetArticle.bind(this);
    this.GetArticleByDOI = this.GetArticleByDOI.bind(this);
    this.ListArticles = this.ListArticles.bind(this);
    this.CreateArticle = this.CreateArticle.bind(this);
    this.UpdateArticle = this.UpdateArticle.bind(this);
    this.DeleteArticle = this.DeleteArticle.bind(this);
  }
  GetArticle(request: GetArticleRequest): Promise<GetArticleResponse> {
    const data = GetArticleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetArticle", data);
    return promise.then((data) => GetArticleResponse.decode(new BinaryReader(data)));
  }

  GetArticleByDOI(request: GetArticleByDOIRequest): Promise<GetArticleByDOIResponse> {
    const data = GetArticleByDOIRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetArticleByDOI", data);
    return promise.then((data) => GetArticleByDOIResponse.decode(new BinaryReader(data)));
  }

  ListArticles(request: ListArticlesRequest): Promise<ListArticlesResponse> {
    const data = ListArticlesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListArticles", data);
    return promise.then((data) => ListArticlesResponse.decode(new BinaryReader(data)));
  }

  CreateArticle(request: CreateArticleRequest): Promise<CreateArticleResponse> {
    const data = CreateArticleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateArticle", data);
    return promise.then((data) => CreateArticleResponse.decode(new BinaryReader(data)));
  }

  UpdateArticle(request: UpdateArticleRequest): Promise<UpdateArticleResponse> {
    const data = UpdateArticleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateArticle", data);
    return promise.then((data) => UpdateArticleResponse.decode(new BinaryReader(data)));
  }

  DeleteArticle(request: DeleteArticleRequest): Promise<DeleteArticleResponse> {
    const data = DeleteArticleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteArticle", data);
    return promise.then((data) => DeleteArticleResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
