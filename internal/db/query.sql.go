// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addArticleAuthor = `-- name: AddArticleAuthor :execresult

INSERT INTO article_authors (article_id, author_id, author_order) VALUES (?, ?, ?)
`

type AddArticleAuthorParams struct {
	ArticleID   int64
	AuthorID    int64
	AuthorOrder sql.NullInt32
}

// Junction table for many-to-many relationship between articles and authors (article_authors)
func (q *Queries) AddArticleAuthor(ctx context.Context, arg AddArticleAuthorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addArticleAuthor, arg.ArticleID, arg.AuthorID, arg.AuthorOrder)
}

const addLibraryArticle = `-- name: AddLibraryArticle :execresult
INSERT INTO library_articles (library_id, article_id, reading_status, reading_progress, dateAdded, dateCompleted, notes, isFavorite) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type AddLibraryArticleParams struct {
	LibraryID       int64
	ArticleID       int64
	ReadingStatus   sql.NullInt16
	ReadingProgress sql.NullInt32
	Dateadded       sql.NullTime
	Datecompleted   sql.NullTime
	Notes           sql.NullString
	Isfavorite      sql.NullBool
}

func (q *Queries) AddLibraryArticle(ctx context.Context, arg AddLibraryArticleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addLibraryArticle,
		arg.LibraryID,
		arg.ArticleID,
		arg.ReadingStatus,
		arg.ReadingProgress,
		arg.Dateadded,
		arg.Datecompleted,
		arg.Notes,
		arg.Isfavorite,
	)
}

const createArticle = `-- name: CreateArticle :execresult
INSERT INTO articles (doi, title, abstract, url, publication_year, journal_name) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateArticleParams struct {
	Doi             string
	Title           string
	Abstract        sql.NullString
	Url             sql.NullString
	PublicationYear sql.NullInt32
	JournalName     sql.NullString
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createArticle,
		arg.Doi,
		arg.Title,
		arg.Abstract,
		arg.Url,
		arg.PublicationYear,
		arg.JournalName,
	)
}

const createAuthor = `-- name: CreateAuthor :execresult
INSERT INTO authors (name, profile_id) VALUES (?, ?)
`

type CreateAuthorParams struct {
	Name      string
	ProfileID sql.NullInt64
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAuthor, arg.Name, arg.ProfileID)
}

const createLibrary = `-- name: CreateLibrary :execresult
INSERT INTO library (owner_id, name, description, isPublic, isDefault) VALUES (?, ?, ?, ?, ?)
`

type CreateLibraryParams struct {
	OwnerID     int64
	Name        sql.NullString
	Description sql.NullString
	Ispublic    sql.NullBool
	Isdefault   sql.NullBool
}

func (q *Queries) CreateLibrary(ctx context.Context, arg CreateLibraryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createLibrary,
		arg.OwnerID,
		arg.Name,
		arg.Description,
		arg.Ispublic,
		arg.Isdefault,
	)
}

const createProfile = `-- name: CreateProfile :execresult
INSERT INTO profiles (name, bio, institution) VALUES (?, ?, ?)
`

type CreateProfileParams struct {
	Name        string
	Bio         sql.NullString
	Institution sql.NullString
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProfile, arg.Name, arg.Bio, arg.Institution)
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles WHERE id = ?
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const deleteArticleAuthor = `-- name: DeleteArticleAuthor :exec
DELETE FROM article_authors WHERE article_id = ? AND author_id = ?
`

type DeleteArticleAuthorParams struct {
	ArticleID int64
	AuthorID  int64
}

func (q *Queries) DeleteArticleAuthor(ctx context.Context, arg DeleteArticleAuthorParams) error {
	_, err := q.db.ExecContext(ctx, deleteArticleAuthor, arg.ArticleID, arg.AuthorID)
	return err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const deleteLibrary = `-- name: DeleteLibrary :exec
DELETE FROM library WHERE id = ?
`

func (q *Queries) DeleteLibrary(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLibrary, id)
	return err
}

const deleteLibraryArticle = `-- name: DeleteLibraryArticle :exec
DELETE FROM library_articles WHERE id = ?
`

func (q *Queries) DeleteLibraryArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLibraryArticle, id)
	return err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles WHERE id = ?
`

func (q *Queries) DeleteProfile(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const deleteSavedArticle = `-- name: DeleteSavedArticle :exec
DELETE FROM library_articles WHERE id = ?
`

func (q *Queries) DeleteSavedArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSavedArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one

SELECT id, doi, title, abstract, url, publication_year, journal_name, created_at, updated_at FROM articles WHERE id = ? LIMIT 1
`

// Academic articles/papers
func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Doi,
		&i.Title,
		&i.Abstract,
		&i.Url,
		&i.PublicationYear,
		&i.JournalName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArticleByDOI = `-- name: GetArticleByDOI :one
SELECT id, doi, title, abstract, url, publication_year, journal_name, created_at, updated_at FROM articles WHERE doi = ? LIMIT 1
`

func (q *Queries) GetArticleByDOI(ctx context.Context, doi string) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticleByDOI, doi)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Doi,
		&i.Title,
		&i.Abstract,
		&i.Url,
		&i.PublicationYear,
		&i.JournalName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthor = `-- name: GetAuthor :one

SELECT id, name, profile_id, created_at, updated_at FROM authors WHERE id = ? LIMIT 1
`

// Authors
func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthorByName = `-- name: GetAuthorByName :one
SELECT id, name, profile_id, created_at, updated_at FROM authors WHERE name = ? LIMIT 1
`

func (q *Queries) GetAuthorByName(ctx context.Context, name string) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthorByName, name)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthorByProfileID = `-- name: GetAuthorByProfileID :one
SELECT id, name, profile_id, created_at, updated_at FROM authors WHERE profile_id = ? LIMIT 1
`

func (q *Queries) GetAuthorByProfileID(ctx context.Context, profileID sql.NullInt64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthorByProfileID, profileID)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProfileID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLibrary = `-- name: GetLibrary :one

SELECT id, owner_id, name, description, ispublic, isdefault, created_at, updated_at FROM library WHERE id = ? LIMIT 1
`

// User's personal library
func (q *Queries) GetLibrary(ctx context.Context, id int64) (Library, error) {
	row := q.db.QueryRowContext(ctx, getLibrary, id)
	var i Library
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.Ispublic,
		&i.Isdefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLibraryArticle = `-- name: GetLibraryArticle :one

SELECT id, library_id, article_id, reading_status, reading_progress, dateadded, datecompleted, notes, isfavorite, created_at, updated_at FROM library_articles WHERE library_id = ? AND article_id = ? LIMIT 1
`

type GetLibraryArticleParams struct {
	LibraryID int64
	ArticleID int64
}

// Junction table linking articles to a user's library, with reading status (library_articles)
func (q *Queries) GetLibraryArticle(ctx context.Context, arg GetLibraryArticleParams) (LibraryArticle, error) {
	row := q.db.QueryRowContext(ctx, getLibraryArticle, arg.LibraryID, arg.ArticleID)
	var i LibraryArticle
	err := row.Scan(
		&i.ID,
		&i.LibraryID,
		&i.ArticleID,
		&i.ReadingStatus,
		&i.ReadingProgress,
		&i.Dateadded,
		&i.Datecompleted,
		&i.Notes,
		&i.Isfavorite,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one

SELECT id, name, bio, institution, created_at, updated_at FROM profiles WHERE id = ? LIMIT 1
`

// Profiles of users/researchers
func (q *Queries) GetProfile(ctx context.Context, id int64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Institution,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArticleAuthorsByArticleID = `-- name: ListArticleAuthorsByArticleID :many
SELECT
    aa.author_id,
    aa.author_order,
    a.name AS author_name,
    a.profile_id
FROM article_authors aa
         JOIN authors a ON aa.author_id = a.id
WHERE aa.article_id = ?
ORDER BY aa.author_order
`

type ListArticleAuthorsByArticleIDRow struct {
	AuthorID    int64
	AuthorOrder sql.NullInt32
	AuthorName  string
	ProfileID   sql.NullInt64
}

func (q *Queries) ListArticleAuthorsByArticleID(ctx context.Context, articleID int64) ([]ListArticleAuthorsByArticleIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listArticleAuthorsByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListArticleAuthorsByArticleIDRow
	for rows.Next() {
		var i ListArticleAuthorsByArticleIDRow
		if err := rows.Scan(
			&i.AuthorID,
			&i.AuthorOrder,
			&i.AuthorName,
			&i.ProfileID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticleAuthorsByAuthorID = `-- name: ListArticleAuthorsByAuthorID :many
SELECT
    aa.article_id,
    aa.author_order,
    ar.title AS article_title,
    ar.doi
FROM article_authors aa
         JOIN articles ar ON aa.article_id = ar.id
WHERE aa.author_id = ?
ORDER BY ar.publication_year DESC, ar.title
`

type ListArticleAuthorsByAuthorIDRow struct {
	ArticleID    int64
	AuthorOrder  sql.NullInt32
	ArticleTitle string
	Doi          string
}

func (q *Queries) ListArticleAuthorsByAuthorID(ctx context.Context, authorID int64) ([]ListArticleAuthorsByAuthorIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listArticleAuthorsByAuthorID, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListArticleAuthorsByAuthorIDRow
	for rows.Next() {
		var i ListArticleAuthorsByAuthorIDRow
		if err := rows.Scan(
			&i.ArticleID,
			&i.AuthorOrder,
			&i.ArticleTitle,
			&i.Doi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticles = `-- name: ListArticles :many
SELECT id, doi, title, abstract, url, publication_year, journal_name, created_at, updated_at FROM articles ORDER BY title
`

func (q *Queries) ListArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, listArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Doi,
			&i.Title,
			&i.Abstract,
			&i.Url,
			&i.PublicationYear,
			&i.JournalName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, profile_id, created_at, updated_at FROM authors ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProfileID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLibrariesByUserID = `-- name: ListLibrariesByUserID :many
SELECT id, owner_id, name, description, ispublic, isdefault, created_at, updated_at FROM library WHERE owner_id = ? ORDER BY created_at
`

func (q *Queries) ListLibrariesByUserID(ctx context.Context, ownerID int64) ([]Library, error) {
	rows, err := q.db.QueryContext(ctx, listLibrariesByUserID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Library
	for rows.Next() {
		var i Library
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Description,
			&i.Ispublic,
			&i.Isdefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLibraryArticlesByLibraryID = `-- name: ListLibraryArticlesByLibraryID :many
SELECT
    la.id,
    la.article_id,
    la.reading_status,
    la.dateAdded,
    la.notes,
    a.title AS article_title,
    a.doi,
    a.publication_year
FROM library_articles la
         JOIN articles a ON la.article_id = a.id
WHERE la.library_id = ?
ORDER BY la.dateAdded DESC
`

type ListLibraryArticlesByLibraryIDRow struct {
	ID              int64
	ArticleID       int64
	ReadingStatus   sql.NullInt16
	Dateadded       sql.NullTime
	Notes           sql.NullString
	ArticleTitle    string
	Doi             string
	PublicationYear sql.NullInt32
}

func (q *Queries) ListLibraryArticlesByLibraryID(ctx context.Context, libraryID int64) ([]ListLibraryArticlesByLibraryIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listLibraryArticlesByLibraryID, libraryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLibraryArticlesByLibraryIDRow
	for rows.Next() {
		var i ListLibraryArticlesByLibraryIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ArticleID,
			&i.ReadingStatus,
			&i.Dateadded,
			&i.Notes,
			&i.ArticleTitle,
			&i.Doi,
			&i.PublicationYear,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfiles = `-- name: ListProfiles :many
SELECT id, name, bio, institution, created_at, updated_at FROM profiles ORDER BY name
`

func (q *Queries) ListProfiles(ctx context.Context) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, listProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.Institution,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :exec
UPDATE articles SET doi = ?, title = ?, abstract = ?, url = ?, publication_year = ?, journal_name = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

type UpdateArticleParams struct {
	Doi             string
	Title           string
	Abstract        sql.NullString
	Url             sql.NullString
	PublicationYear sql.NullInt32
	JournalName     sql.NullString
	ID              int64
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) error {
	_, err := q.db.ExecContext(ctx, updateArticle,
		arg.Doi,
		arg.Title,
		arg.Abstract,
		arg.Url,
		arg.PublicationYear,
		arg.JournalName,
		arg.ID,
	)
	return err
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors SET name = ?, profile_id = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

type UpdateAuthorParams struct {
	Name      string
	ProfileID sql.NullInt64
	ID        int64
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthor, arg.Name, arg.ProfileID, arg.ID)
	return err
}

const updateLibrary = `-- name: UpdateLibrary :exec
UPDATE library SET name = ?, description = ?, isPublic = ?, isDefault = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

type UpdateLibraryParams struct {
	Name        sql.NullString
	Description sql.NullString
	Ispublic    sql.NullBool
	Isdefault   sql.NullBool
	ID          int64
}

func (q *Queries) UpdateLibrary(ctx context.Context, arg UpdateLibraryParams) error {
	_, err := q.db.ExecContext(ctx, updateLibrary,
		arg.Name,
		arg.Description,
		arg.Ispublic,
		arg.Isdefault,
		arg.ID,
	)
	return err
}

const updateLibraryArticleNotes = `-- name: UpdateLibraryArticleNotes :exec
UPDATE library_articles SET notes = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

type UpdateLibraryArticleNotesParams struct {
	Notes sql.NullString
	ID    int64
}

func (q *Queries) UpdateLibraryArticleNotes(ctx context.Context, arg UpdateLibraryArticleNotesParams) error {
	_, err := q.db.ExecContext(ctx, updateLibraryArticleNotes, arg.Notes, arg.ID)
	return err
}

const updateLibraryArticleStatus = `-- name: UpdateLibraryArticleStatus :exec
UPDATE library_articles SET reading_status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

type UpdateLibraryArticleStatusParams struct {
	ReadingStatus sql.NullInt16
	ID            int64
}

func (q *Queries) UpdateLibraryArticleStatus(ctx context.Context, arg UpdateLibraryArticleStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateLibraryArticleStatus, arg.ReadingStatus, arg.ID)
	return err
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE profiles SET name = ?, bio = ?, institution = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

type UpdateProfileParams struct {
	Name        string
	Bio         sql.NullString
	Institution sql.NullString
	ID          int64
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateProfile,
		arg.Name,
		arg.Bio,
		arg.Institution,
		arg.ID,
	)
	return err
}

const updateSavedArticle = `-- name: UpdateSavedArticle :exec
UPDATE library_articles SET reading_status = ?, notes = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
`

type UpdateSavedArticleParams struct {
	ReadingStatus sql.NullInt16
	Notes         sql.NullString
	ID            int64
}

func (q *Queries) UpdateSavedArticle(ctx context.Context, arg UpdateSavedArticleParams) error {
	_, err := q.db.ExecContext(ctx, updateSavedArticle, arg.ReadingStatus, arg.Notes, arg.ID)
	return err
}
