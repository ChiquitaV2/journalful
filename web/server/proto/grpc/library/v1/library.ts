// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: library/v1/library.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "api.library.v1";

export enum ReadingStatus {
  READING_STATUS_UNSPECIFIED = 0,
  READING_STATUS_TO_READ = 1,
  READING_STATUS_READING = 2,
  READING_STATUS_READ = 3,
  READING_STATUS_ABANDONED = 4,
  UNRECOGNIZED = -1,
}

export function readingStatusFromJSON(object: any): ReadingStatus {
  switch (object) {
    case 0:
    case "READING_STATUS_UNSPECIFIED":
      return ReadingStatus.READING_STATUS_UNSPECIFIED;
    case 1:
    case "READING_STATUS_TO_READ":
      return ReadingStatus.READING_STATUS_TO_READ;
    case 2:
    case "READING_STATUS_READING":
      return ReadingStatus.READING_STATUS_READING;
    case 3:
    case "READING_STATUS_READ":
      return ReadingStatus.READING_STATUS_READ;
    case 4:
    case "READING_STATUS_ABANDONED":
      return ReadingStatus.READING_STATUS_ABANDONED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReadingStatus.UNRECOGNIZED;
  }
}

export function readingStatusToJSON(object: ReadingStatus): string {
  switch (object) {
    case ReadingStatus.READING_STATUS_UNSPECIFIED:
      return "READING_STATUS_UNSPECIFIED";
    case ReadingStatus.READING_STATUS_TO_READ:
      return "READING_STATUS_TO_READ";
    case ReadingStatus.READING_STATUS_READING:
      return "READING_STATUS_READING";
    case ReadingStatus.READING_STATUS_READ:
      return "READING_STATUS_READ";
    case ReadingStatus.READING_STATUS_ABANDONED:
      return "READING_STATUS_ABANDONED";
    case ReadingStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Library {
  id: number;
  userId: number;
  name?: string | undefined;
  articles: LibraryArticle[];
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface LibraryArticle {
  id: number;
  articleId: number;
  readingStatus: ReadingStatus;
  addedAt: Date | undefined;
  notes?: string | undefined;
  articleTitle: string;
  doi: string;
  publicationYear: number;
}

export interface SaveArticleToLibraryRequest {
  libraryId: number;
  articleId: number;
  readingStatus: ReadingStatus;
  notes?: string | undefined;
}

export interface SaveArticleToLibraryResponse {
  id: number;
}

export interface GetUserLibraryRequest {
  userId: number;
}

export interface GetUserLibraryResponse {
  libraries: Library[];
}

function createBaseLibrary(): Library {
  return { id: 0, userId: 0, name: undefined, articles: [], createdAt: undefined, updatedAt: undefined };
}

export const Library: MessageFns<Library> = {
  encode(message: Library, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.userId !== 0) {
      writer.uint32(16).int64(message.userId);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    for (const v of message.articles) {
      LibraryArticle.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Library {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLibrary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.articles.push(LibraryArticle.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Library {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      articles: globalThis.Array.isArray(object?.articles)
        ? object.articles.map((e: any) => LibraryArticle.fromJSON(e))
        : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Library): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.articles?.length) {
      obj.articles = message.articles.map((e) => LibraryArticle.toJSON(e));
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Library>, I>>(base?: I): Library {
    return Library.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Library>, I>>(object: I): Library {
    const message = createBaseLibrary();
    message.id = object.id ?? 0;
    message.userId = object.userId ?? 0;
    message.name = object.name ?? undefined;
    message.articles = object.articles?.map((e) => LibraryArticle.fromPartial(e)) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseLibraryArticle(): LibraryArticle {
  return {
    id: 0,
    articleId: 0,
    readingStatus: 0,
    addedAt: undefined,
    notes: undefined,
    articleTitle: "",
    doi: "",
    publicationYear: 0,
  };
}

export const LibraryArticle: MessageFns<LibraryArticle> = {
  encode(message: LibraryArticle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.articleId !== 0) {
      writer.uint32(16).int64(message.articleId);
    }
    if (message.readingStatus !== 0) {
      writer.uint32(24).int32(message.readingStatus);
    }
    if (message.addedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.addedAt), writer.uint32(34).fork()).join();
    }
    if (message.notes !== undefined) {
      writer.uint32(42).string(message.notes);
    }
    if (message.articleTitle !== "") {
      writer.uint32(50).string(message.articleTitle);
    }
    if (message.doi !== "") {
      writer.uint32(58).string(message.doi);
    }
    if (message.publicationYear !== 0) {
      writer.uint32(64).int32(message.publicationYear);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LibraryArticle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLibraryArticle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.articleId = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.readingStatus = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.addedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.notes = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.articleTitle = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.doi = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.publicationYear = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LibraryArticle {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      articleId: isSet(object.articleId) ? globalThis.Number(object.articleId) : 0,
      readingStatus: isSet(object.readingStatus) ? readingStatusFromJSON(object.readingStatus) : 0,
      addedAt: isSet(object.addedAt) ? fromJsonTimestamp(object.addedAt) : undefined,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
      articleTitle: isSet(object.articleTitle) ? globalThis.String(object.articleTitle) : "",
      doi: isSet(object.doi) ? globalThis.String(object.doi) : "",
      publicationYear: isSet(object.publicationYear) ? globalThis.Number(object.publicationYear) : 0,
    };
  },

  toJSON(message: LibraryArticle): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.articleId !== 0) {
      obj.articleId = Math.round(message.articleId);
    }
    if (message.readingStatus !== 0) {
      obj.readingStatus = readingStatusToJSON(message.readingStatus);
    }
    if (message.addedAt !== undefined) {
      obj.addedAt = message.addedAt.toISOString();
    }
    if (message.notes !== undefined) {
      obj.notes = message.notes;
    }
    if (message.articleTitle !== "") {
      obj.articleTitle = message.articleTitle;
    }
    if (message.doi !== "") {
      obj.doi = message.doi;
    }
    if (message.publicationYear !== 0) {
      obj.publicationYear = Math.round(message.publicationYear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LibraryArticle>, I>>(base?: I): LibraryArticle {
    return LibraryArticle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LibraryArticle>, I>>(object: I): LibraryArticle {
    const message = createBaseLibraryArticle();
    message.id = object.id ?? 0;
    message.articleId = object.articleId ?? 0;
    message.readingStatus = object.readingStatus ?? 0;
    message.addedAt = object.addedAt ?? undefined;
    message.notes = object.notes ?? undefined;
    message.articleTitle = object.articleTitle ?? "";
    message.doi = object.doi ?? "";
    message.publicationYear = object.publicationYear ?? 0;
    return message;
  },
};

function createBaseSaveArticleToLibraryRequest(): SaveArticleToLibraryRequest {
  return { libraryId: 0, articleId: 0, readingStatus: 0, notes: undefined };
}

export const SaveArticleToLibraryRequest: MessageFns<SaveArticleToLibraryRequest> = {
  encode(message: SaveArticleToLibraryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.libraryId !== 0) {
      writer.uint32(8).int64(message.libraryId);
    }
    if (message.articleId !== 0) {
      writer.uint32(16).int64(message.articleId);
    }
    if (message.readingStatus !== 0) {
      writer.uint32(24).int32(message.readingStatus);
    }
    if (message.notes !== undefined) {
      writer.uint32(34).string(message.notes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveArticleToLibraryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveArticleToLibraryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.libraryId = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.articleId = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.readingStatus = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.notes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveArticleToLibraryRequest {
    return {
      libraryId: isSet(object.libraryId) ? globalThis.Number(object.libraryId) : 0,
      articleId: isSet(object.articleId) ? globalThis.Number(object.articleId) : 0,
      readingStatus: isSet(object.readingStatus) ? readingStatusFromJSON(object.readingStatus) : 0,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : undefined,
    };
  },

  toJSON(message: SaveArticleToLibraryRequest): unknown {
    const obj: any = {};
    if (message.libraryId !== 0) {
      obj.libraryId = Math.round(message.libraryId);
    }
    if (message.articleId !== 0) {
      obj.articleId = Math.round(message.articleId);
    }
    if (message.readingStatus !== 0) {
      obj.readingStatus = readingStatusToJSON(message.readingStatus);
    }
    if (message.notes !== undefined) {
      obj.notes = message.notes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveArticleToLibraryRequest>, I>>(base?: I): SaveArticleToLibraryRequest {
    return SaveArticleToLibraryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveArticleToLibraryRequest>, I>>(object: I): SaveArticleToLibraryRequest {
    const message = createBaseSaveArticleToLibraryRequest();
    message.libraryId = object.libraryId ?? 0;
    message.articleId = object.articleId ?? 0;
    message.readingStatus = object.readingStatus ?? 0;
    message.notes = object.notes ?? undefined;
    return message;
  },
};

function createBaseSaveArticleToLibraryResponse(): SaveArticleToLibraryResponse {
  return { id: 0 };
}

export const SaveArticleToLibraryResponse: MessageFns<SaveArticleToLibraryResponse> = {
  encode(message: SaveArticleToLibraryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveArticleToLibraryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveArticleToLibraryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveArticleToLibraryResponse {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: SaveArticleToLibraryResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveArticleToLibraryResponse>, I>>(base?: I): SaveArticleToLibraryResponse {
    return SaveArticleToLibraryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveArticleToLibraryResponse>, I>>(object: I): SaveArticleToLibraryResponse {
    const message = createBaseSaveArticleToLibraryResponse();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetUserLibraryRequest(): GetUserLibraryRequest {
  return { userId: 0 };
}

export const GetUserLibraryRequest: MessageFns<GetUserLibraryRequest> = {
  encode(message: GetUserLibraryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int64(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserLibraryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserLibraryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserLibraryRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: GetUserLibraryRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserLibraryRequest>, I>>(base?: I): GetUserLibraryRequest {
    return GetUserLibraryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserLibraryRequest>, I>>(object: I): GetUserLibraryRequest {
    const message = createBaseGetUserLibraryRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseGetUserLibraryResponse(): GetUserLibraryResponse {
  return { libraries: [] };
}

export const GetUserLibraryResponse: MessageFns<GetUserLibraryResponse> = {
  encode(message: GetUserLibraryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.libraries) {
      Library.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserLibraryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserLibraryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.libraries.push(Library.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserLibraryResponse {
    return {
      libraries: globalThis.Array.isArray(object?.libraries)
        ? object.libraries.map((e: any) => Library.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserLibraryResponse): unknown {
    const obj: any = {};
    if (message.libraries?.length) {
      obj.libraries = message.libraries.map((e) => Library.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserLibraryResponse>, I>>(base?: I): GetUserLibraryResponse {
    return GetUserLibraryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserLibraryResponse>, I>>(object: I): GetUserLibraryResponse {
    const message = createBaseGetUserLibraryResponse();
    message.libraries = object.libraries?.map((e) => Library.fromPartial(e)) || [];
    return message;
  },
};

export interface LibraryService {
  SaveArticleToLibrary(request: SaveArticleToLibraryRequest): Promise<SaveArticleToLibraryResponse>;
  GetUserLibrary(request: GetUserLibraryRequest): Promise<GetUserLibraryResponse>;
}

export const LibraryServiceServiceName = "api.library.v1.LibraryService";
export class LibraryServiceClientImpl implements LibraryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || LibraryServiceServiceName;
    this.rpc = rpc;
    this.SaveArticleToLibrary = this.SaveArticleToLibrary.bind(this);
    this.GetUserLibrary = this.GetUserLibrary.bind(this);
  }
  SaveArticleToLibrary(request: SaveArticleToLibraryRequest): Promise<SaveArticleToLibraryResponse> {
    const data = SaveArticleToLibraryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SaveArticleToLibrary", data);
    return promise.then((data) => {
      try {
        return SaveArticleToLibraryResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "SaveArticleToLibrary", error));
      }
      return Promise.reject(error);
    });
  }

  GetUserLibrary(request: GetUserLibraryRequest): Promise<GetUserLibraryResponse> {
    const data = GetUserLibraryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserLibrary", data);
    return promise.then((data) => {
      try {
        return GetUserLibraryResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "GetUserLibrary", error));
      }
      return Promise.reject(error);
    });
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  handleError?(service: string, method: string, error: globalThis.Error): globalThis.Error;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
