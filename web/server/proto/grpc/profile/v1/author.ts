// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: profile/v1/author.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "api.profile.v1";

export interface Author {
  id: number;
  name: string;
  profileId: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface GetAuthorRequest {
  id: number;
}

export interface GetAuthorResponse {
  author: Author | undefined;
}

export interface GetAuthorByProfileIDRequest {
  profileId: number;
}

export interface GetAuthorByProfileIDResponse {
  author: Author | undefined;
}

/** Add pagination or filters here */
export interface ListAuthorsRequest {
}

export interface ListAuthorsResponse {
  authors: Author[];
}

export interface CreateAuthorRequest {
  name: string;
  profileId?: number | undefined;
}

export interface CreateAuthorResponse {
  /** ID of the newly created author */
  id: number;
}

export interface UpdateAuthorRequest {
  id: number;
  name: string;
  profileId?: number | undefined;
}

/** Empty response indicating success */
export interface UpdateAuthorResponse {
}

export interface DeleteAuthorRequest {
  id: number;
}

/** Empty response indicating success */
export interface DeleteAuthorResponse {
}

function createBaseAuthor(): Author {
  return { id: 0, name: "", profileId: 0, createdAt: undefined, updatedAt: undefined };
}

export const Author: MessageFns<Author> = {
  encode(message: Author, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.profileId !== 0) {
      writer.uint32(24).int64(message.profileId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Author {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.profileId = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Author {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      profileId: isSet(object.profileId) ? globalThis.Number(object.profileId) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Author): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.profileId !== 0) {
      obj.profileId = Math.round(message.profileId);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Author>, I>>(base?: I): Author {
    return Author.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Author>, I>>(object: I): Author {
    const message = createBaseAuthor();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.profileId = object.profileId ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseGetAuthorRequest(): GetAuthorRequest {
  return { id: 0 };
}

export const GetAuthorRequest: MessageFns<GetAuthorRequest> = {
  encode(message: GetAuthorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAuthorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAuthorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAuthorRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetAuthorRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAuthorRequest>, I>>(base?: I): GetAuthorRequest {
    return GetAuthorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAuthorRequest>, I>>(object: I): GetAuthorRequest {
    const message = createBaseGetAuthorRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetAuthorResponse(): GetAuthorResponse {
  return { author: undefined };
}

export const GetAuthorResponse: MessageFns<GetAuthorResponse> = {
  encode(message: GetAuthorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.author !== undefined) {
      Author.encode(message.author, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAuthorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAuthorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.author = Author.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAuthorResponse {
    return { author: isSet(object.author) ? Author.fromJSON(object.author) : undefined };
  },

  toJSON(message: GetAuthorResponse): unknown {
    const obj: any = {};
    if (message.author !== undefined) {
      obj.author = Author.toJSON(message.author);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAuthorResponse>, I>>(base?: I): GetAuthorResponse {
    return GetAuthorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAuthorResponse>, I>>(object: I): GetAuthorResponse {
    const message = createBaseGetAuthorResponse();
    message.author = (object.author !== undefined && object.author !== null)
      ? Author.fromPartial(object.author)
      : undefined;
    return message;
  },
};

function createBaseGetAuthorByProfileIDRequest(): GetAuthorByProfileIDRequest {
  return { profileId: 0 };
}

export const GetAuthorByProfileIDRequest: MessageFns<GetAuthorByProfileIDRequest> = {
  encode(message: GetAuthorByProfileIDRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profileId !== 0) {
      writer.uint32(8).int64(message.profileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAuthorByProfileIDRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAuthorByProfileIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.profileId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAuthorByProfileIDRequest {
    return { profileId: isSet(object.profileId) ? globalThis.Number(object.profileId) : 0 };
  },

  toJSON(message: GetAuthorByProfileIDRequest): unknown {
    const obj: any = {};
    if (message.profileId !== 0) {
      obj.profileId = Math.round(message.profileId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAuthorByProfileIDRequest>, I>>(base?: I): GetAuthorByProfileIDRequest {
    return GetAuthorByProfileIDRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAuthorByProfileIDRequest>, I>>(object: I): GetAuthorByProfileIDRequest {
    const message = createBaseGetAuthorByProfileIDRequest();
    message.profileId = object.profileId ?? 0;
    return message;
  },
};

function createBaseGetAuthorByProfileIDResponse(): GetAuthorByProfileIDResponse {
  return { author: undefined };
}

export const GetAuthorByProfileIDResponse: MessageFns<GetAuthorByProfileIDResponse> = {
  encode(message: GetAuthorByProfileIDResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.author !== undefined) {
      Author.encode(message.author, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAuthorByProfileIDResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAuthorByProfileIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.author = Author.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAuthorByProfileIDResponse {
    return { author: isSet(object.author) ? Author.fromJSON(object.author) : undefined };
  },

  toJSON(message: GetAuthorByProfileIDResponse): unknown {
    const obj: any = {};
    if (message.author !== undefined) {
      obj.author = Author.toJSON(message.author);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAuthorByProfileIDResponse>, I>>(base?: I): GetAuthorByProfileIDResponse {
    return GetAuthorByProfileIDResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAuthorByProfileIDResponse>, I>>(object: I): GetAuthorByProfileIDResponse {
    const message = createBaseGetAuthorByProfileIDResponse();
    message.author = (object.author !== undefined && object.author !== null)
      ? Author.fromPartial(object.author)
      : undefined;
    return message;
  },
};

function createBaseListAuthorsRequest(): ListAuthorsRequest {
  return {};
}

export const ListAuthorsRequest: MessageFns<ListAuthorsRequest> = {
  encode(_: ListAuthorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAuthorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAuthorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListAuthorsRequest {
    return {};
  },

  toJSON(_: ListAuthorsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAuthorsRequest>, I>>(base?: I): ListAuthorsRequest {
    return ListAuthorsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAuthorsRequest>, I>>(_: I): ListAuthorsRequest {
    const message = createBaseListAuthorsRequest();
    return message;
  },
};

function createBaseListAuthorsResponse(): ListAuthorsResponse {
  return { authors: [] };
}

export const ListAuthorsResponse: MessageFns<ListAuthorsResponse> = {
  encode(message: ListAuthorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.authors) {
      Author.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAuthorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAuthorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authors.push(Author.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAuthorsResponse {
    return {
      authors: globalThis.Array.isArray(object?.authors) ? object.authors.map((e: any) => Author.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListAuthorsResponse): unknown {
    const obj: any = {};
    if (message.authors?.length) {
      obj.authors = message.authors.map((e) => Author.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAuthorsResponse>, I>>(base?: I): ListAuthorsResponse {
    return ListAuthorsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAuthorsResponse>, I>>(object: I): ListAuthorsResponse {
    const message = createBaseListAuthorsResponse();
    message.authors = object.authors?.map((e) => Author.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateAuthorRequest(): CreateAuthorRequest {
  return { name: "", profileId: undefined };
}

export const CreateAuthorRequest: MessageFns<CreateAuthorRequest> = {
  encode(message: CreateAuthorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.profileId !== undefined) {
      writer.uint32(16).int64(message.profileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAuthorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAuthorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.profileId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAuthorRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      profileId: isSet(object.profileId) ? globalThis.Number(object.profileId) : undefined,
    };
  },

  toJSON(message: CreateAuthorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.profileId !== undefined) {
      obj.profileId = Math.round(message.profileId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAuthorRequest>, I>>(base?: I): CreateAuthorRequest {
    return CreateAuthorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAuthorRequest>, I>>(object: I): CreateAuthorRequest {
    const message = createBaseCreateAuthorRequest();
    message.name = object.name ?? "";
    message.profileId = object.profileId ?? undefined;
    return message;
  },
};

function createBaseCreateAuthorResponse(): CreateAuthorResponse {
  return { id: 0 };
}

export const CreateAuthorResponse: MessageFns<CreateAuthorResponse> = {
  encode(message: CreateAuthorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAuthorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAuthorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAuthorResponse {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: CreateAuthorResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAuthorResponse>, I>>(base?: I): CreateAuthorResponse {
    return CreateAuthorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAuthorResponse>, I>>(object: I): CreateAuthorResponse {
    const message = createBaseCreateAuthorResponse();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseUpdateAuthorRequest(): UpdateAuthorRequest {
  return { id: 0, name: "", profileId: undefined };
}

export const UpdateAuthorRequest: MessageFns<UpdateAuthorRequest> = {
  encode(message: UpdateAuthorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.profileId !== undefined) {
      writer.uint32(24).int64(message.profileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAuthorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAuthorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.profileId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAuthorRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      profileId: isSet(object.profileId) ? globalThis.Number(object.profileId) : undefined,
    };
  },

  toJSON(message: UpdateAuthorRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.profileId !== undefined) {
      obj.profileId = Math.round(message.profileId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAuthorRequest>, I>>(base?: I): UpdateAuthorRequest {
    return UpdateAuthorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAuthorRequest>, I>>(object: I): UpdateAuthorRequest {
    const message = createBaseUpdateAuthorRequest();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.profileId = object.profileId ?? undefined;
    return message;
  },
};

function createBaseUpdateAuthorResponse(): UpdateAuthorResponse {
  return {};
}

export const UpdateAuthorResponse: MessageFns<UpdateAuthorResponse> = {
  encode(_: UpdateAuthorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAuthorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAuthorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateAuthorResponse {
    return {};
  },

  toJSON(_: UpdateAuthorResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAuthorResponse>, I>>(base?: I): UpdateAuthorResponse {
    return UpdateAuthorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAuthorResponse>, I>>(_: I): UpdateAuthorResponse {
    const message = createBaseUpdateAuthorResponse();
    return message;
  },
};

function createBaseDeleteAuthorRequest(): DeleteAuthorRequest {
  return { id: 0 };
}

export const DeleteAuthorRequest: MessageFns<DeleteAuthorRequest> = {
  encode(message: DeleteAuthorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAuthorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAuthorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAuthorRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteAuthorRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAuthorRequest>, I>>(base?: I): DeleteAuthorRequest {
    return DeleteAuthorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAuthorRequest>, I>>(object: I): DeleteAuthorRequest {
    const message = createBaseDeleteAuthorRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseDeleteAuthorResponse(): DeleteAuthorResponse {
  return {};
}

export const DeleteAuthorResponse: MessageFns<DeleteAuthorResponse> = {
  encode(_: DeleteAuthorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAuthorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAuthorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteAuthorResponse {
    return {};
  },

  toJSON(_: DeleteAuthorResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAuthorResponse>, I>>(base?: I): DeleteAuthorResponse {
    return DeleteAuthorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAuthorResponse>, I>>(_: I): DeleteAuthorResponse {
    const message = createBaseDeleteAuthorResponse();
    return message;
  },
};

export interface AuthorService {
  GetAuthor(request: GetAuthorRequest): Promise<GetAuthorResponse>;
  GetAuthorByProfileID(request: GetAuthorByProfileIDRequest): Promise<GetAuthorByProfileIDResponse>;
  ListAuthors(request: ListAuthorsRequest): Promise<ListAuthorsResponse>;
  CreateAuthor(request: CreateAuthorRequest): Promise<CreateAuthorResponse>;
  UpdateAuthor(request: UpdateAuthorRequest): Promise<UpdateAuthorResponse>;
  DeleteAuthor(request: DeleteAuthorRequest): Promise<DeleteAuthorResponse>;
}

export const AuthorServiceServiceName = "api.profile.v1.AuthorService";
export class AuthorServiceClientImpl implements AuthorService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AuthorServiceServiceName;
    this.rpc = rpc;
    this.GetAuthor = this.GetAuthor.bind(this);
    this.GetAuthorByProfileID = this.GetAuthorByProfileID.bind(this);
    this.ListAuthors = this.ListAuthors.bind(this);
    this.CreateAuthor = this.CreateAuthor.bind(this);
    this.UpdateAuthor = this.UpdateAuthor.bind(this);
    this.DeleteAuthor = this.DeleteAuthor.bind(this);
  }
  GetAuthor(request: GetAuthorRequest): Promise<GetAuthorResponse> {
    const data = GetAuthorRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAuthor", data);
    return promise.then((data) => {
      try {
        return GetAuthorResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "GetAuthor", error));
      }
      return Promise.reject(error);
    });
  }

  GetAuthorByProfileID(request: GetAuthorByProfileIDRequest): Promise<GetAuthorByProfileIDResponse> {
    const data = GetAuthorByProfileIDRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAuthorByProfileID", data);
    return promise.then((data) => {
      try {
        return GetAuthorByProfileIDResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "GetAuthorByProfileID", error));
      }
      return Promise.reject(error);
    });
  }

  ListAuthors(request: ListAuthorsRequest): Promise<ListAuthorsResponse> {
    const data = ListAuthorsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListAuthors", data);
    return promise.then((data) => {
      try {
        return ListAuthorsResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "ListAuthors", error));
      }
      return Promise.reject(error);
    });
  }

  CreateAuthor(request: CreateAuthorRequest): Promise<CreateAuthorResponse> {
    const data = CreateAuthorRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateAuthor", data);
    return promise.then((data) => {
      try {
        return CreateAuthorResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "CreateAuthor", error));
      }
      return Promise.reject(error);
    });
  }

  UpdateAuthor(request: UpdateAuthorRequest): Promise<UpdateAuthorResponse> {
    const data = UpdateAuthorRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateAuthor", data);
    return promise.then((data) => {
      try {
        return UpdateAuthorResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "UpdateAuthor", error));
      }
      return Promise.reject(error);
    });
  }

  DeleteAuthor(request: DeleteAuthorRequest): Promise<DeleteAuthorResponse> {
    const data = DeleteAuthorRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteAuthor", data);
    return promise.then((data) => {
      try {
        return DeleteAuthorResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "DeleteAuthor", error));
      }
      return Promise.reject(error);
    });
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  handleError?(service: string, method: string, error: globalThis.Error): globalThis.Error;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
