// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: profile/v1/profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "api.profile.v1";

export interface Profile {
  id: number;
  name: string;
  bio: string;
  institution: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface GetProfileRequest {
  id: number;
}

export interface GetProfileResponse {
  profile: Profile | undefined;
}

/** Add pagination or filters here */
export interface ListProfilesRequest {
}

export interface ListProfilesResponse {
  profiles: Profile[];
}

export interface CreateProfileRequest {
  name: string;
  bio?: string | undefined;
  institution?: string | undefined;
}

export interface CreateProfileResponse {
  id: number;
}

export interface UpdateProfileRequest {
  id: number;
  name: string;
  bio?: string | undefined;
  institution?: string | undefined;
}

/** Empty response indicating success */
export interface UpdateProfileResponse {
}

export interface DeleteProfileRequest {
  id: number;
}

/** Empty response indicating success */
export interface DeleteProfileResponse {
}

function createBaseProfile(): Profile {
  return { id: 0, name: "", bio: "", institution: "", createdAt: undefined, updatedAt: undefined };
}

export const Profile: MessageFns<Profile> = {
  encode(message: Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.bio !== "") {
      writer.uint32(26).string(message.bio);
    }
    if (message.institution !== "") {
      writer.uint32(34).string(message.institution);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.institution = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      institution: isSet(object.institution) ? globalThis.String(object.institution) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.institution !== "") {
      obj.institution = message.institution;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Profile>, I>>(base?: I): Profile {
    return Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Profile>, I>>(object: I): Profile {
    const message = createBaseProfile();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.bio = object.bio ?? "";
    message.institution = object.institution ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseGetProfileRequest(): GetProfileRequest {
  return { id: 0 };
}

export const GetProfileRequest: MessageFns<GetProfileRequest> = {
  encode(message: GetProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfileRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetProfileRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProfileRequest>, I>>(base?: I): GetProfileRequest {
    return GetProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProfileRequest>, I>>(object: I): GetProfileRequest {
    const message = createBaseGetProfileRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetProfileResponse(): GetProfileResponse {
  return { profile: undefined };
}

export const GetProfileResponse: MessageFns<GetProfileResponse> = {
  encode(message: GetProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfileResponse {
    return { profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined };
  },

  toJSON(message: GetProfileResponse): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProfileResponse>, I>>(base?: I): GetProfileResponse {
    return GetProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProfileResponse>, I>>(object: I): GetProfileResponse {
    const message = createBaseGetProfileResponse();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseListProfilesRequest(): ListProfilesRequest {
  return {};
}

export const ListProfilesRequest: MessageFns<ListProfilesRequest> = {
  encode(_: ListProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListProfilesRequest {
    return {};
  },

  toJSON(_: ListProfilesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProfilesRequest>, I>>(base?: I): ListProfilesRequest {
    return ListProfilesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProfilesRequest>, I>>(_: I): ListProfilesRequest {
    const message = createBaseListProfilesRequest();
    return message;
  },
};

function createBaseListProfilesResponse(): ListProfilesResponse {
  return { profiles: [] };
}

export const ListProfilesResponse: MessageFns<ListProfilesResponse> = {
  encode(message: ListProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      Profile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(Profile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProfilesResponse {
    return {
      profiles: globalThis.Array.isArray(object?.profiles) ? object.profiles.map((e: any) => Profile.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProfilesResponse): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => Profile.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProfilesResponse>, I>>(base?: I): ListProfilesResponse {
    return ListProfilesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProfilesResponse>, I>>(object: I): ListProfilesResponse {
    const message = createBaseListProfilesResponse();
    message.profiles = object.profiles?.map((e) => Profile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateProfileRequest(): CreateProfileRequest {
  return { name: "", bio: undefined, institution: undefined };
}

export const CreateProfileRequest: MessageFns<CreateProfileRequest> = {
  encode(message: CreateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.bio !== undefined) {
      writer.uint32(18).string(message.bio);
    }
    if (message.institution !== undefined) {
      writer.uint32(26).string(message.institution);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.institution = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProfileRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : undefined,
      institution: isSet(object.institution) ? globalThis.String(object.institution) : undefined,
    };
  },

  toJSON(message: CreateProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bio !== undefined) {
      obj.bio = message.bio;
    }
    if (message.institution !== undefined) {
      obj.institution = message.institution;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProfileRequest>, I>>(base?: I): CreateProfileRequest {
    return CreateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProfileRequest>, I>>(object: I): CreateProfileRequest {
    const message = createBaseCreateProfileRequest();
    message.name = object.name ?? "";
    message.bio = object.bio ?? undefined;
    message.institution = object.institution ?? undefined;
    return message;
  },
};

function createBaseCreateProfileResponse(): CreateProfileResponse {
  return { id: 0 };
}

export const CreateProfileResponse: MessageFns<CreateProfileResponse> = {
  encode(message: CreateProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProfileResponse {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: CreateProfileResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProfileResponse>, I>>(base?: I): CreateProfileResponse {
    return CreateProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProfileResponse>, I>>(object: I): CreateProfileResponse {
    const message = createBaseCreateProfileResponse();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseUpdateProfileRequest(): UpdateProfileRequest {
  return { id: 0, name: "", bio: undefined, institution: undefined };
}

export const UpdateProfileRequest: MessageFns<UpdateProfileRequest> = {
  encode(message: UpdateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.bio !== undefined) {
      writer.uint32(26).string(message.bio);
    }
    if (message.institution !== undefined) {
      writer.uint32(34).string(message.institution);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.institution = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : undefined,
      institution: isSet(object.institution) ? globalThis.String(object.institution) : undefined,
    };
  },

  toJSON(message: UpdateProfileRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bio !== undefined) {
      obj.bio = message.bio;
    }
    if (message.institution !== undefined) {
      obj.institution = message.institution;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(base?: I): UpdateProfileRequest {
    return UpdateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(object: I): UpdateProfileRequest {
    const message = createBaseUpdateProfileRequest();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.bio = object.bio ?? undefined;
    message.institution = object.institution ?? undefined;
    return message;
  },
};

function createBaseUpdateProfileResponse(): UpdateProfileResponse {
  return {};
}

export const UpdateProfileResponse: MessageFns<UpdateProfileResponse> = {
  encode(_: UpdateProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateProfileResponse {
    return {};
  },

  toJSON(_: UpdateProfileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProfileResponse>, I>>(base?: I): UpdateProfileResponse {
    return UpdateProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProfileResponse>, I>>(_: I): UpdateProfileResponse {
    const message = createBaseUpdateProfileResponse();
    return message;
  },
};

function createBaseDeleteProfileRequest(): DeleteProfileRequest {
  return { id: 0 };
}

export const DeleteProfileRequest: MessageFns<DeleteProfileRequest> = {
  encode(message: DeleteProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProfileRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteProfileRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteProfileRequest>, I>>(base?: I): DeleteProfileRequest {
    return DeleteProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteProfileRequest>, I>>(object: I): DeleteProfileRequest {
    const message = createBaseDeleteProfileRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseDeleteProfileResponse(): DeleteProfileResponse {
  return {};
}

export const DeleteProfileResponse: MessageFns<DeleteProfileResponse> = {
  encode(_: DeleteProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteProfileResponse {
    return {};
  },

  toJSON(_: DeleteProfileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteProfileResponse>, I>>(base?: I): DeleteProfileResponse {
    return DeleteProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteProfileResponse>, I>>(_: I): DeleteProfileResponse {
    const message = createBaseDeleteProfileResponse();
    return message;
  },
};

export interface ProfileService {
  GetProfile(request: GetProfileRequest): Promise<GetProfileResponse>;
  ListProfiles(request: ListProfilesRequest): Promise<ListProfilesResponse>;
  CreateProfile(request: CreateProfileRequest): Promise<CreateProfileResponse>;
  UpdateProfile(request: UpdateProfileRequest): Promise<UpdateProfileResponse>;
  DeleteProfile(request: DeleteProfileRequest): Promise<DeleteProfileResponse>;
}

export const ProfileServiceServiceName = "api.profile.v1.ProfileService";
export class ProfileServiceClientImpl implements ProfileService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ProfileServiceServiceName;
    this.rpc = rpc;
    this.GetProfile = this.GetProfile.bind(this);
    this.ListProfiles = this.ListProfiles.bind(this);
    this.CreateProfile = this.CreateProfile.bind(this);
    this.UpdateProfile = this.UpdateProfile.bind(this);
    this.DeleteProfile = this.DeleteProfile.bind(this);
  }
  GetProfile(request: GetProfileRequest): Promise<GetProfileResponse> {
    const data = GetProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProfile", data);
    return promise.then((data) => {
      try {
        return GetProfileResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "GetProfile", error));
      }
      return Promise.reject(error);
    });
  }

  ListProfiles(request: ListProfilesRequest): Promise<ListProfilesResponse> {
    const data = ListProfilesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListProfiles", data);
    return promise.then((data) => {
      try {
        return ListProfilesResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "ListProfiles", error));
      }
      return Promise.reject(error);
    });
  }

  CreateProfile(request: CreateProfileRequest): Promise<CreateProfileResponse> {
    const data = CreateProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateProfile", data);
    return promise.then((data) => {
      try {
        return CreateProfileResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "CreateProfile", error));
      }
      return Promise.reject(error);
    });
  }

  UpdateProfile(request: UpdateProfileRequest): Promise<UpdateProfileResponse> {
    const data = UpdateProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProfile", data);
    return promise.then((data) => {
      try {
        return UpdateProfileResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "UpdateProfile", error));
      }
      return Promise.reject(error);
    });
  }

  DeleteProfile(request: DeleteProfileRequest): Promise<DeleteProfileResponse> {
    const data = DeleteProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteProfile", data);
    return promise.then((data) => {
      try {
        return DeleteProfileResponse.decode(new BinaryReader(data));
      } catch (error) {
        return Promise.reject(error);
      }
    }).catch((error) => {
      if (this.rpc.handleError) {
        return Promise.reject(this.rpc.handleError(this.service, "DeleteProfile", error));
      }
      return Promise.reject(error);
    });
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  handleError?(service: string, method: string, error: globalThis.Error): globalThis.Error;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
